# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: 'main'
        fetch-depth: '0'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Remote pull
      run: >
        git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/ae3f-devel/LogicFortress.git LogicFortress && cd LogicFortress

    - name: Configure Git
      run: |
        cd LogicFortress
        git config user.name BOT
        git config user.email a@a.com

    - name: Cleanup
      uses: JesseTG/rm@v1.0.3
      with:
        path: ./LogicFortress/Assets/Plugins

    - name: Git Add
      run: cd LogicFortress && git add ./Assets/Plugins

    - name: Git Commit 
      run: cd LogicFortress && git commit -m "[CI/CD] Previous binaries removal"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake 
        -B LogicFortress/build
        -S LogicFortress
        -G Ninja

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build LogicFortress/build --config ${{ matrix.build_type }}

    - name: Git Add
      run: cd LogicFortress && git add ./Assets/

    - name: git Commit
      run: cd LogicFortress && git commit -m "[CI/CD] Generated plugin build automation"
    
    - name: Push
      run: cd LogicFortress && git push https://${{ secrets.GITHUB_TOKEN }}@github.com/ae3f-devel/LogicFortress.git
